#!/usr/bin/env python3

from calendar import day_name
import sys
import os
import yaml
import argparse
import logging
import urllib.request
import shutil
import hashlib


"""
    utmh - Client tool to manage images from repository 
           and to interact with spawned VMs.
"""


__appname__ = "utmh"
__version__ = "0.9"
__author__ = "@gyptazy <gyptazy [at] gyptazy.ch"


def main():
    """ Run the main function of utmh """
    # Get arguments for config file from CLI
    argparser = argparse.ArgumentParser(description='utmh')
    argparser.add_argument('-c', '--config', type=str, help='Path to config file')
    argparser.add_argument('-i', '--image', type=str, help='Name of image file')
    # Create subparser for actions
    subparser = argparser.add_subparsers(dest='cmd')
    for cmd in [
                 "list",
                 "download",
                 "upload",
                 "start",
                 "stop",
                 "ssh"
                ]:
        subparser.add_parser(cmd)
    cliargs = argparser.parse_args()

    # Set file for logging
    logging = set_logger('utmh.log')
    
    # Test for a valid config
    config_file = test_config_file(logging, cliargs.config)
    test_path(logging, config_file, fail=True)
    
    # Get config (YAML) file
    config_content = get_yaml(cliargs.config)
    
    # Validate config content
    validate_config_file(logging, config_content)

    # Redirect all possible commands to their related functions
    if cliargs.cmd == "list":
        """ Option: List all available images on remote registry """
        image_list(logging, config_content)

    if cliargs.cmd == "download":
        """ Option: Download a specific image from remote registry """
        image_download(logging, config_content, cliargs.image)

    if cliargs.cmd == "upload":
        """ Option: Upload a specific image to remote registry """
        dummy()

    if cliargs.cmd == "start":
        """ Option: Start VM"""
        dummy()

    if cliargs.cmd == "stop":
        """ Option: Stop VM """
        dummy()

    if cliargs.cmd == "ssh":
        """ Option: SSH into VM (as root) """
        dummy()


# Placeholder
def dummy():
    """ Dummy function """
    print("Not yet implemented")


def image_download(logging, config_content, dname):
    """ Download a specific image from remote registry """
    # Validate that a downloadable file name is given
    if dname is None:
        logging.critical("No image name defined")

    # Download image from remote registry
    remote_path = "/images/"
    remote_file = f"{dname}.tgz"
    download_file(logging, config_content, remote_path, remote_file, image_type=True)

    # Validate the SHA256 sum of downloaded file
    local_path = config_content["image_path"]
    fname = f"{local_path}/{remote_file}"
    repo_index = get_yaml('index.yaml')
    checksum_should = repo_index[remote_file]["sha256"]
    checksum_is = get_sha256_checksum(logging, fname)
    if checksum_should == checksum_is:
        logging.info(f"Checksums are equal: {checksum_is}")
    else:
        logging.critical(f"Checksums are not equal.")
        logging.critical(f"Checksum should be: {checksum_should} | Checksum is: {checksum_is}")
        sys.exit(1)


def get_sha256_checksum(logging, fname):
    """ Get the SHA256 checksum of a given file """
    sha256_hash = hashlib.sha256()
    with open(fname,"rb") as f:
        # Read and update hash string value in blocks of 4K
        for byte_block in iter(lambda: f.read(4096),b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()


def image_list(logging, config_content):
    """ List all available images on remote registry """
    download_file(logging, config_content, "/", "index.yaml")
    test_path(logging, 'index.yaml', fail=True)
    repo_index = get_yaml('index.yaml')
    print_table(logging, repo_index)


def print_table(logging, repo_index):
    """ Pretty print a table output on CLI """
    # Print table header
    print("{:<15} {:<15} {:<15} {:<15} {:<15} {:<15}".format("OS Type", "OS", "Version", "Packages", "Arch", "Downloadname"))
    print("----------------------------------------------------------------------------------------------------------------")

    # Get values for each present image in index.yaml file
    for k, v in repo_index.items():
        os_type = str(v.get("os_tpye", "Unknown"))
        os  = str(v.get("os", "Unknown"))
        ver = str(v.get("version", "Unknown"))
        inst_type =  str(v.get("type", "Unknown"))
        arch = str(v.get("arch", "Unknown"))

        # Reformat k to get the image name without suffix
        # but keep all other dots in file name
        k = k.rsplit('.', maxsplit=1)[0]

        # Print output of a single meta file
        print ("{:<15} {:<15} {:<15} {:<15} {:<15} {:<15}".format(os_type, os, ver, inst_type, arch, k))


def download_file(logging, config_content, remote_path, remote_file, image_type=False):
    """ Download remote files via http/https """
    server = config_content["server"]
    url = f"{server}{remote_path}{remote_file}"
    logging.info(f"Downloading file: {url}")

    # Check if a image or repo index file will be downloaded
    if image_type:
        # Set path according to user's config for
        # downloading images
        local_path = config_content["image_path"]
        fname = f"{local_path}/{remote_file}"
    else:
        # Download repo index file to root directory
        fname = "index.yaml"

    # Download image or repo index file from remote repository
    try:
        with urllib.request.urlopen(url) as response, open(fname, 'wb') as out_file:
            shutil.copyfileobj(response, out_file)
    except urllib.error.HTTPError as err:
        logging.error(f"HTTP Error: {err}")
    except shutil.SameFileError:
        # This should never happen by SHA256 check
        # but we may pass here
        pass


def validate_config_file(logging, config_content):
    """ Validate config file """
    server = config_content.get("server", None)
    if server is None:
        logging.critical("'server' option is missing in config file.")


def test_config_file(logging, fname):
    """ Test for a valid config file """
    # Use config that is explicit given by the user
    if fname is not None:
        config_file = fname
    # Fallback to ~/.utmh/config.yaml
    else:
        config_file = "~/.utmh/config.yaml"
    return config_file


def test_path(logging, fname, fail=False):
    """ Test is path (file/dir) is present """
    present = os.path.exists(fname)

    if not present and fail:
        logging.critical(f"Can not proceed. File/Dir is not present: {fname}")
        sys.exit(1)

    logging.info(f"File/Dir is present: {fname}")
    return present


def get_yaml(config_file):
    """ Get the content of a YAML file """
    with open(config_file) as stream:
        try:
            config = yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            logging.critical(exc)
    return config


def set_logger(log_file):
    """ Set the logger """ 
    logging.basicConfig(filename=log_file, level=logging.DEBUG,
                        format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M%p')
    logging.info(f"Logger configured. Logging to: {log_file}")
    return logging


main()
